version 1.0

import "https://raw.githubusercontent.com/aofarrel/SRANWRP/v1.1.18/tasks/processing_tasks.wdl" as processing
import "https://raw.githubusercontent.com/aofarrel/diffdiff/0.0.8/diffdiff.wdl" as dd
import "./matutils_and_friends.wdl" as matWDLlib

# User notes:
# * Must be run with --copy-input-files on miniwdl if using backmasking.
# * diffs input must not be pre-combined if using backmasking.

# Dev notes:
# Anything marked !ForwardReference is using a bogus fallback value with select_first().

workflow Tree_Nine {
	input {
		Array[File] diffs
		File? input_tree
		File? matutils_annotations
		
		# options
		Boolean cross_sample_masking     = true
		Boolean cluster_everything       = false
		Int     cluster_max_distance     = 20
		Boolean detailed_clades          = false
		Boolean make_cluster_subtrees    = true
		Float?  max_low_coverage_sites
		Int     subtree_context_samples  = 0
		String? reroot_to_this_node
		Boolean skip_summary             = true
		
		# rarely used files
		Array[File]? coverage_reports  # by default vcf_to_diff.py filters sites per site coverage and both 
		                               # make_diff_from_vcf_and_mask and make_mask_and_diff WDL tasks filter
		                               # samples by overall coverage, so this is rarely needed in Tree Nine
		File? special_samples
		File? ref_genome               # equivalent to USHER's ref argument, otherwise assumes H37Rv
		
		# output file names, extension not included
		Array[String]? rename_samples
		String out_prefix              = "tree"
		String out_prefix_summary      = out_prefix + "_"
		String in_prefix_summary       = basename(select_first([input_tree, "for_debugging_only__tb_7K_noQC_diffs_mask2ref.L.fixed.pb"]))
		String out_diffs               = "_combined"
		String out_tree_annotated_pb   = "_annotated"
		String out_tree_nextstrain     = "_auspice"
		String out_tree_nwk            = "_nwk"
		String out_tree_taxonium       = "_taxonium"
		String out_tree_raw_pb         = "_raw"
		
	}

	parameter_meta {
		diffs: "Array of diff files"
		input_tree: "usher_sampled_diff -i (If not defined, falls back on a large SRA tree)"
		matutils_annotations: "Two column TSV for clade annotation via matUtils"

		cross_sample_masking: "Enable backmasking of samples for which we have diff files"
		cluster_everything: "If true, matrix and cluster all samples on tree; if false, only matrix and cluster special_samples (if defined) or newly added samples. Does NOT affect backmask clustering."
		cluster_max_distance: "Maximum SNP distance between two samples for them to be in the same cluster"
		coverage_reports: "NOT USUALLY NEEDED - Single line text files generated by Lily's vcf to diff script, used to filter samples with low overall coverage"
		detailed_clades: "usher_sampled_diff -D"
		make_cluster_subtrees: "If true, make nextstrain subtrees of clusters in addition to one big nextstrain tree"
		max_low_coverage_sites: "Maximum percentage of low coverage sites a sample can have before throwing it out (requires coverage_reports)"
		special_samples: "Only matrix anad cluster samples in this file instead of clustering only needed added samples. Does NOT affect backmask clustering."
		subtree_context_samples: "If make_subtrees, each cluster subtree gets this number of non-cluster context samples"
		ref_genome: "Reference genome, equivalent to UShER's ref argument, default is H37Rv (M tuberculosis)"
		rename_samples: "For file at index i in diffs[i], rename it to the corresponding string at rename_samples[i]."
		reroot_to_this_node: "matUtils extract -y (Reroot the output tree relative to this node, leave blank to not reroot)"
		out_prefix: "Prefix for all output files"
		skip_summary: "Do not run matutils summary on any of the trees"
	}

	call processing.cat_files as cat_diff_files {
		input:
			files = diffs,
			out_filename = out_prefix + out_diffs + ".diff",
			keep_only_unique_lines = false,
			removal_candidates = coverage_reports,
			removal_threshold = max_low_coverage_sites,
			first_lines_out_filename = "samples_added",
			overwrite_first_lines = rename_samples
	}

	File special_samples_added = select_first([special_samples, cat_diff_files.first_lines, usher_sampled_diff.usher_tree]) #!ForwardReference

	if(!(skip_summary)) {
		if (defined(input_tree)) {
			String basename_input_mat = basename(select_first([input_tree, ""]))

			# iff there is a metadata tsv, annotate input tree with it before summarizing
			if (defined(matutils_annotations)) {
				String annotated = "annotated_"
				call matWDLlib.annotate as annotate_input_tree {
					input:
						input_mat = select_first([input_tree, usher_sampled_diff.usher_tree]), #!ForwardReference
						metadata_tsv = select_first([matutils_annotations, usher_sampled_diff.usher_tree]), #!ForwardReference
						outfile_annotated = "input_annotated_" + basename_input_mat + ".pb"
				}
			}

			File possibly_annotated_input_tree = select_first([annotate_input_tree.annotated_tree, input_tree])
			String annotated_or_blank = select_first([annotated, ""])
		}
	}

	call matWDLlib.usher_sampled_diff as usher_sampled_diff {
		input:
			detailed_clades = detailed_clades,
			diff = cat_diff_files.outfile,
			input_mat = input_tree,
			output_mat = "max" + out_prefix + out_tree_raw_pb + ".pb",
			ref_genome = ref_genome
	}

	if (defined(matutils_annotations)) {
		call matWDLlib.annotate as annotate_usher {
			input:
				input_mat = usher_sampled_diff.usher_tree,
				metadata_tsv = select_first([matutils_annotations, usher_sampled_diff.usher_tree]), # bogus fallback
				outfile_annotated = "max" + out_prefix + out_tree_annotated_pb + ".pb"
		}
	}

	File possibly_annotated_maximal_output_tree = select_first([annotate_usher.annotated_tree, usher_sampled_diff.usher_tree])

	if(defined(reroot_to_this_node)) {

		if(!(skip_summary)) {
			call matWDLlib.summarize as summarize_before_reroot {
				input:
					input_mat = possibly_annotated_maximal_output_tree,
					prefix_outs = "maximal_before_reroot"
			}
		}

		call matWDLlib.reroot as reroot_usher {
			input:
				input_mat = possibly_annotated_maximal_output_tree,
				reroot_to_this_node = select_first([reroot_to_this_node, ""])
		}
	}

	File final_maximal_output_tree = select_first([reroot_usher.rerooted_tree, possibly_annotated_maximal_output_tree])
	
	output {
		File  tree_usher = final_maximal_output_tree                            
	}
}
